from sys import maxsize as infinity
import math
import random

import bisect




class Problem:
    def __init__(self, initial, goal=None):
        self.initial = initial
        self.goal = goal

    def successor(self, state):
       
        raise NotImplementedError

    def actions(self, state):
       
        return self.successor(state).keys()

    def result(self, state, action):
       
        possible = self.successor(state)
        return possible[action]


    def goal_test(self, state):
       
        return state == self.goal

    def path_cost(self, c, state1, action, state2):
        
        return c + 1

    def value(self):
       
        raise NotImplementedError





class Node:
    def __init__(self, state, parent=None, action=None, path_cost=0):
       
        self.state = state
        self.parent = parent
        self.action = action
        self.path_cost = path_cost
        self.depth = 0  # search depth
        if parent:
            self.depth = parent.depth + 1

    def __repr__(self):
        return "<Node %s>" % (self.state,)

    def __lt__(self, node):
        return self.state < node.state

    def expand(self, problem):
        
        return [self.child_node(problem, action)
                for action in problem.actions(self.state)]

    def child_node(self, problem, action):
        
        next_state = problem.result(self.state, action)
        return Node(next_state, self, action,
                    problem.path_cost(self.path_cost, self.state,
                                      action, next_state))

    def solution(self):
        
        return [node.action for node in self.path()[1:]]

    def solve(self):
        
        return [node.state for node in self.path()[0:]]

    def path(self):
        
        x, result = self, []
        while x:
            result.append(x)
            x = x.parent
        result.reverse()
        return result

   

    def __eq__(self, other):
        return isinstance(other, Node) and self.state == other.state

    def __hash__(self):
        return hash(self.state)




class Queue:
    

    def __init__(self):
        raise NotImplementedError

    def append(self, item):
        
        raise NotImplementedError

    def extend(self, items):
        
        raise NotImplementedError

    def pop(self):
        
        raise NotImplementedError

    def __len__(self):
        
        raise NotImplementedError

    def __contains__(self, item):
        
        raise NotImplementedError


class Stack(Queue):
    """Last-In-First-Out Queue."""

    def __init__(self):
        self.data = []

    def append(self, item):
        self.data.append(item)

    def extend(self, items):
        self.data.extend(items)

    def pop(self):
        return self.data.pop()

    def __len__(self):
        return len(self.data)

    def __contains__(self, item):
        return item in self.data


class FIFOQueue(Queue):
    """First-In-First-Out Queue."""

    def __init__(self):
        self.data = []

    def append(self, item):
        self.data.append(item)

    def extend(self, items):
        self.data.extend(items)

    def pop(self):
        return self.data.pop(0)

    def __len__(self):
        return len(self.data)

    def __contains__(self, item):
        return item in self.data


class PriorityQueue(Queue):
    
    def __init__(self, order=min, f=lambda x: x):
        
        assert order in [min, max]
        self.data = []
        self.order = order
        self.f = f

    def append(self, item):
        bisect.insort_right(self.data, (self.f(item), item))

    def extend(self, items):
        for item in items:
            bisect.insort_right(self.data, (self.f(item), item))

    def pop(self):
        if self.order == min:
            return self.data.pop(0)[1]
        return self.data.pop()[1]

    def __len__(self):
        return len(self.data)

    def __contains__(self, item):
        return any(item == pair[1] for pair in self.data)

    def __getitem__(self, key):
        for _, item in self.data:
            if item == key:
                return item

    def __delitem__(self, key):
        for i, (value, item) in enumerate(self.data):
            if item == key:
                self.data.pop(i)





def memoize(fn, slot=None):
    
    if slot:
        def memoized_fn(obj, *args):
            if hasattr(obj, slot):
                return getattr(obj, slot)
            else:
                val = fn(obj, *args)
                setattr(obj, slot, val)
                return val
    else:
        def memoized_fn(*args):
            if args not in memoized_fn.cache:
                memoized_fn.cache[args] = fn(*args)
            return memoized_fn.cache[args]

        memoized_fn.cache = {}
    return memoized_fn


def best_first_graph_search(problem, f):
    
    f = memoize(f, 'f')
    node = Node(problem.initial)
    if problem.goal_test(node.state):
        return node
    frontier = PriorityQueue(min, f)
    frontier.append(node)
    explored = set()
    while frontier:
        node = frontier.pop()
        if problem.goal_test(node.state):
            return node
        explored.add(node.state)
        for child in node.expand(problem):
            if child.state not in explored and child not in frontier:
                frontier.append(child)
            elif child in frontier:
                incumbent = frontier[child]
                if f(child) < f(incumbent):
                    del frontier[incumbent]
                    frontier.append(child)
    return None


def greedy_best_first_graph_search(problem, h=None):
    
    h = memoize(h or problem.h, 'h')
    return best_first_graph_search(problem, h)


def astar_search(problem, h=None):
   
    h = memoize(h or problem.h, 'h')
    return best_first_graph_search(problem, lambda n: n.path_cost + h(n))


def recursive_best_first_search(problem, h=None):
    
    h = memoize(h or problem.h, 'h')

    def RBFS(problem, node, flimit):
        if problem.goal_test(node.state):
            return node, 0  
        successors = node.expand(problem)
        if len(successors) == 0:
            return None, infinity
        for s in successors:
            s.f = max(s.path_cost + h(s), node.f)
        while True:
            
            successors.sort(key=lambda x: x.f)
            best = successors[0]
            if best.f > flimit:
                return None, best.f
            if len(successors) > 1:
                alternative = successors[1].f
            else:
                alternative = infinity
            result, best.f = RBFS(problem, best, min(flimit, alternative))
            if result is not None:
                return result, best.f

    node = Node(problem.initial)
    node.f = h(node)
    result, bestf = RBFS(problem, node, infinity)
    return result





def distance(a, b):
    """The distance between two (x, y) points."""
    return math.hypot((a[0] - b[0]), (a[1] - b[1]))


class Graph:
    """A graph connects nodes (verticies) by edges (links).  Each edge can also
   have a length associated with it.  The constructor call is something like:
       g = Graph({'A': {'B': 1, 'C': 2})
   this makes a graph with 3 nodes, A, B, and C, with an edge of length 1 from
   A to B,  and an edge of length 2 from A to C.  You can also do:
       g = Graph({'A': {'B': 1, 'C': 2}, directed=False)
   This makes an undirected graph, so inverse links are also added. The graph
   stays undirected; if you add more links with g.connect('B', 'C', 3), then
   inverse link is also added.  You can use g.nodes() to get a list of nodes,
   g.get('A') to get a dict of links out of A, and g.get('A', 'B') to get the
   length of the link from A to B.  'Lengths' can actually be any object at
   all, and nodes can be any hashable object."""

    def __init__(self, dictionary=None, directed=True):
        self.dict = dictionary or {}
        self.directed = directed
        if not directed:
            self.make_undirected()

    def make_undirected(self):
        """Make a digraph into an undirected graph by adding symmetric edges."""
        for a in list(self.dict.keys()):
            for (b, dist) in self.dict[a].items():
                self.connect1(b, a, dist)

    def connect(self, node_a, node_b, distance_val=1):
        """Add a link from node_a and node_b of given distance_val, and also add the inverse
       link if the graph is undirected."""
        self.connect1(node_a, node_b, distance_val)
        if not self.directed:
            self.connect1(node_b, node_a, distance_val)

    def connect1(self, node_a, node_b, distance_val):
        """Add a link from node_a to node_b of given distance_val, in one direction only."""
        self.dict.setdefault(node_a, {})[node_b] = distance_val

    def get(self, a, b=None):
        """Return a link distance or a dict of {node: distance} entries.
       .get(a,b) returns the distance or None;
       .get(a) returns a dict of {node: distance} entries, possibly {}."""
        links = self.dict.setdefault(a, {})
        if b is None:
            return links
        else:
            return links.get(b)

    def nodes(self):
        """Return a list of nodes in the graph."""
        return list(self.dict.keys())


def UndirectedGraph(dictionary=None):
    """Build a Graph where every edge (including future ones) goes both ways."""
    return Graph(dictionary=dictionary, directed=False)


def RandomGraph(nodes=list(range(10)), min_links=2, width=400, height=300,
                curvature=lambda: random.uniform(1.1, 1.5)):
    """Construct a random graph, with the specified nodes, and random links.
   The nodes are laid out randomly on a (width x height) rectangle.
   Then each node is connected to the min_links nearest neighbors.
   Because inverse links are added, some nodes will have more connections.
   The distance between nodes is the hypotenuse times curvature(),
   where curvature() defaults to a random number between 1.1 and 1.5."""
    g = UndirectedGraph()
    g.locations = {}
    # Build the cities
    for node in nodes:
        g.locations[node] = (random.randrange(width), random.randrange(height))
    # Build roads from each city to at least min_links nearest neighbors.
    for i in range(min_links):
        for node in nodes:
            if len(g.get(node)) < min_links:
                here = g.locations[node]

                def distance_to_node(n):
                    if n is node or g.get(node, n):
                        return math.inf
                    return distance(g.locations[n], here)

                neighbor = nodes.index(min(nodes, key=distance_to_node))
                d = distance(g.locations[neighbor], here) * curvature()
                g.connect(node, neighbor, int(d))
    return g


class GraphProblem(Problem):
    """The problem of searching a graph from one node to another."""

    def __init__(self, initial, goal, graph):
        super().__init__(initial, goal)
        self.graph = graph

    def actions(self, state):
        """The actions at a graph node are just its neighbors."""
        return list(self.graph.get(state).keys())

    def result(self, state, action):
        """The result of going to a neighbor is just that neighbor."""
        return action

    def path_cost(self, c, state1, action, state2):
        return c + (self.graph.get(state1, state2) or math.inf)

    def h(self, node):
        """h function is straight-line distance from a node's state to goal."""
        locs = getattr(self.graph, 'locations', None)
        if locs:
            return int(distance(locs[node.state], locs[self.goal]))
        else:
            return math.inf


import math
import random

import bisect




class Problem:
    def __init__(self, initial, goal=None):
        self.initial = initial
        self.goal = goal

    def successor(self, state):
       
        raise NotImplementedError

    def actions(self, state):
       
        return self.successor(state).keys()

    def result(self, state, action):
       
        possible = self.successor(state)
        return possible[action]

    def goal_test(self, state):
       
        return state == self.goal

    def path_cost(self, c, state1, action, state2):
       
        return c + 1

    def value(self):
       
        raise NotImplementedError




class Node:
    def __init__(self, state, parent=None, action=None, path_cost=0):
       
        self.state = state
        self.parent = parent
        self.action = action
        self.path_cost = path_cost
        self.depth = 0  # search depth
        if parent:
            self.depth = parent.depth + 1

    def __repr__(self):
        return "<Node %s>" % (self.state,)

    def __lt__(self, node):
        return self.state < node.state

    def expand(self, problem):
        
        return [self.child_node(problem, action)
                for action in problem.actions(self.state)]

    def child_node(self, problem, action):
       
        next_state = problem.result(self.state, action)
        return Node(next_state, self, action,
                    problem.path_cost(self.path_cost, self.state,
                                      action, next_state))

    def solution(self):
        
        return [node.action for node in self.path()[1:]]

    def solve(self):
        
        return [node.state for node in self.path()[0:]]

    def path(self):
        
        x, result = self, []
        while x:
            result.append(x)
            x = x.parent
        result.reverse()
        return result

   

    def __eq__(self, other):
        return isinstance(other, Node) and self.state == other.state

    def __hash__(self):
        return hash(self.state)



class Queue:
   

    def __init__(self):
        raise NotImplementedError

    def append(self, item):
        
        raise NotImplementedError

    def extend(self, items):
        
        raise NotImplementedError

    def pop(self):
        
        raise NotImplementedError

    def __len__(self):
        
        raise NotImplementedError

    def __contains__(self, item):
       
        raise NotImplementedError


class Stack(Queue):
    """Last-In-First-Out Queue."""

    def __init__(self):
        self.data = []

    def append(self, item):
        self.data.append(item)

    def extend(self, items):
        self.data.extend(items)

    def pop(self):
        return self.data.pop()

    def __len__(self):
        return len(self.data)

    def __contains__(self, item):
        return item in self.data


class FIFOQueue(Queue):
    """First-In-First-Out Queue."""

    def __init__(self):
        self.data = []

    def append(self, item):
        self.data.append(item)

    def extend(self, items):
        self.data.extend(items)

    def pop(self):
        return self.data.pop(0)

    def __len__(self):
        return len(self.data)

    def __contains__(self, item):
        return item in self.data


class PriorityQueue(Queue):
   

    def __init__(self, order=min, f=lambda x: x):
       
        assert order in [min, max]
        self.data = []
        self.order = order
        self.f = f

    def append(self, item):
        bisect.insort_right(self.data, (self.f(item), item))

    def extend(self, items):
        for item in items:
            bisect.insort_right(self.data, (self.f(item), item))

    def pop(self):
        if self.order == min:
            return self.data.pop(0)[1]
        return self.data.pop()[1]

    def __len__(self):
        return len(self.data)

    def __contains__(self, item):
        return any(item == pair[1] for pair in self.data)

    def __getitem__(self, key):
        for _, item in self.data:
            if item == key:
                return item

    def __delitem__(self, key):
        for i, (value, item) in enumerate(self.data):
            if item == key:
                self.data.pop(i)


def distance(a, b):
    """The distance between two (x, y) points."""
    return math.hypot((a[0] - b[0]), (a[1] - b[1]))


class Graph:
    """A graph connects nodes (verticies) by edges (links).  Each edge can also
   have a length associated with it.  The constructor call is something like:
       g = Graph({'A': {'B': 1, 'C': 2})
   this makes a graph with 3 nodes, A, B, and C, with an edge of length 1 from
   A to B,  and an edge of length 2 from A to C.  You can also do:
       g = Graph({'A': {'B': 1, 'C': 2}, directed=False)
   This makes an undirected graph, so inverse links are also added. The graph
   stays undirected; if you add more links with g.connect('B', 'C', 3), then
   inverse link is also added.  You can use g.nodes() to get a list of nodes,
   g.get('A') to get a dict of links out of A, and g.get('A', 'B') to get the
   length of the link from A to B.  'Lengths' can actually be any object at
   all, and nodes can be any hashable object."""

    def __init__(self, dictionary=None, directed=True):
        self.dict = dictionary or {}
        self.directed = directed
        if not directed:
            self.make_undirected()

    def make_undirected(self):
        """Make a digraph into an undirected graph by adding symmetric edges."""
        for a in list(self.dict.keys()):
            for (b, dist) in self.dict[a].items():
                self.connect1(b, a, dist)

    def connect(self, node_a, node_b, distance_val=1):
        """Add a link from node_a and node_b of given distance_val, and also add the inverse
       link if the graph is undirected."""
        self.connect1(node_a, node_b, distance_val)
        if not self.directed:
            self.connect1(node_b, node_a, distance_val)

    def connect1(self, node_a, node_b, distance_val):
        """Add a link from node_a to node_b of given distance_val, in one direction only."""
        self.dict.setdefault(node_a, {})[node_b] = distance_val

    def get(self, a, b=None):
        """Return a link distance or a dict of {node: distance} entries.
       .get(a,b) returns the distance or None;
       .get(a) returns a dict of {node: distance} entries, possibly {}."""
        links = self.dict.setdefault(a, {})
        if b is None:
            return links
        else:
            return links.get(b)

    def nodes(self):
        """Return a list of nodes in the graph."""
        return list(self.dict.keys())


def UndirectedGraph(dictionary=None):
    """Build a Graph where every edge (including future ones) goes both ways."""
    return Graph(dictionary=dictionary, directed=False)


def RandomGraph(nodes=list(range(10)), min_links=2, width=400, height=300,
                curvature=lambda: random.uniform(1.1, 1.5)):
    """Construct a random graph, with the specified nodes, and random links.
   The nodes are laid out randomly on a (width x height) rectangle.
   Then each node is connected to the min_links nearest neighbors.
   Because inverse links are added, some nodes will have more connections.
   The distance between nodes is the hypotenuse times curvature(),
   where curvature() defaults to a random number between 1.1 and 1.5."""
    g = UndirectedGraph()
    g.locations = {}
    # Build the cities
    for node in nodes:
        g.locations[node] = (random.randrange(width), random.randrange(height))
    # Build roads from each city to at least min_links nearest neighbors.
    for i in range(min_links):
        for node in nodes:
            if len(g.get(node)) < min_links:
                here = g.locations[node]

                def distance_to_node(n):
                    if n is node or g.get(node, n):
                        return math.inf
                    return distance(g.locations[n], here)

                neighbor = nodes.index(min(nodes, key=distance_to_node))
                d = distance(g.locations[neighbor], here) * curvature()
                g.connect(node, neighbor, int(d))
    return g


class GraphProblem(Problem):
    """The problem of searching a graph from one node to another."""

    def __init__(self, initial, goal, graph):
        super().__init__(initial, goal)
        self.graph = graph

    def actions(self, state):
        """The actions at a graph node are just its neighbors."""
        return list(self.graph.get(state).keys())

    def result(self, state, action):
        """The result of going to a neighbor is just that neighbor."""
        return action

    def path_cost(self, c, state1, action, state2):
        return c + (self.graph.get(state1, state2) or math.inf)

    def h(self, node):
        """h function is straight-line distance from a node's state to goal."""
        locs = getattr(self.graph, 'locations', None)
        if locs:
            return int(distance(locs[node.state], locs[self.goal]))
        else:
            return math.inf


Pocetok = input()
Kraj = input()
Stanica = input()

graph = UndirectedGraph({
    'A': {'B': 7, 'F': 14, 'C': 9},
    'B': {'A': 7, 'C': 10, 'D': 15},
    'C': {'A': 9, 'B': 10, 'D': 11, 'F': 2},
    'E': {'F': 9, 'D': 6},
    'F': {'A': 14, 'C': 2, 'E': 9},
    'D': {'B': 15, 'C': 11, 'E': 6}
})



graph_problem = GraphProblem(Pocetok, Kraj, graph)
answer = astar_search(graph_problem)
if Stanica in answer.solve():
    print(answer.path_cost - 9)
else:
    print(answer.path_cost)
