import sys
import bisect



infinity = float('inf')  

class Queue:
  
    def __init__(self):
        raise NotImplementedError

    def extend(self, items):
        for item in items:
            self.append(item)


def Stack():
    
    return []


class FIFOQueue(Queue):

    def __init__(self):
        self.A = []
        self.start = 0

    def append(self, item):
        self.A.append(item)

    def __len__(self):
        return len(self.A) - self.start

    def extend(self, items):
        self.A.extend(items)

    def pop(self):
        e = self.A[self.start]
        self.start += 1
        if self.start > 5 and self.start > len(self.A) / 2:
            self.A = self.A[self.start:]
            self.start = 0
        return e

    def __contains__(self, item):
        return item in self.A[self.start:]


class PriorityQueue(Queue):
   

    def __init__(self, order=min, f=lambda x: x):
        self.A = []
        self.order = order
        self.f = f

    def append(self, item):
        bisect.insort(self.A, (self.f(item), item))

    def __len__(self):
        return len(self.A)

    def pop(self):
        if self.order == min:
            return self.A.pop(0)[1]
        else:
            return self.A.pop()[1]

    def __contains__(self, item):
        return any(item == pair[1] for pair in self.A)

    def __getitem__(self, key):
        for _, item in self.A:
            if item == key:
                return item

    def __delitem__(self, key):
        for i, (value, item) in enumerate(self.A):
            if item == key:
                self.A.pop(i)




class Problem:


    def __init__(self, initial, goal=None):

        self.initial = initial
        self.goal = goal

    def successor(self, state):

        raise NotImplementedError

    def actions(self, state):
        raise NotImplementedError

    def result(self, state, action):
        raise NotImplementedError

    def goal_test(self, state):
        return state == self.goal

    def path_cost(self, c, state1, action, state2):
        return c + 1

    def value(self):
        raise NotImplementedError




class Node:
   

    def __init__(self, state, parent=None, action=None, path_cost=0):
  
        self.state = state
        self.parent = parent
        self.action = action
        self.path_cost = path_cost
        self.depth = 0
        if parent:
            self.depth = parent.depth + 1

    def __repr__(self):
        return "<Node %s>" % (self.state,)

    def __lt__(self, node):
        return self.state < node.state

    def expand(self, problem):
       
        return [self.child_node(problem, action)
                for action in problem.actions(self.state)]

    def child_node(self, problem, action):
       
        next = problem.result(self.state, action)
        return Node(next, self, action,
                    problem.path_cost(self.path_cost, self.state,
                                      action, next))

    def solution(self):
       
        return [node.action for node in self.path()[1:]]

    def solve(self):
        
        return [node.state for node in self.path()[0:]]

    def path(self):
     
        x, result = self, []
        while x:
            result.append(x)
            x = x.parent
        return list(reversed(result))

   

    def __eq__(self, other):
        return isinstance(other, Node) and self.state == other.state

    def __hash__(self):
        return hash(self.state)



def tree_search(problem, fringe):
   
    fringe.append(Node(problem.initial))
    while fringe:
        node = fringe.pop()
        print (node.state)
        if problem.goal_test(node.state):
            return node
        fringe.extend(node.expand(problem))
    return None


def breadth_first_tree_search(problem):
  
    return tree_search(problem, FIFOQueue())


def depth_first_tree_search(problem):
    
    return tree_search(problem, Stack())




def graph_search(problem, fringe):
    closed = {}
    fringe.append(Node(problem.initial))
    while fringe:
        node = fringe.pop()
        if problem.goal_test(node.state):
            return node
        if node.state not in closed:
            closed[node.state] = True
            fringe.extend(node.expand(problem))
    return None


def breadth_first_graph_search(problem):
    return graph_search(problem, FIFOQueue())


def depth_first_graph_search(problem):
    return graph_search(problem, Stack())


def uniform_cost_search(problem):
    return graph_search(problem, PriorityQueue(lambda a, b: a.path_cost < b.path_cost))


def depth_limited_search(problem, limit=50):

    def recursive_dls(node, problem, limit):
        cutoff_occurred = False
        if problem.goal_test(node.state):
            return node
        elif node.depth == limit:
            return 'cutoff'
        else:
            for successor in node.expand(problem):
                result = recursive_dls(successor, problem, limit)
                if result == 'cutoff':
                    cutoff_occurred = True
                elif result != None:
                    return result
        if cutoff_occurred:
            return 'cutoff'
        else:
            return None

    # Body of depth_limited_search:
    return recursive_dls(Node(problem.initial), problem, limit)


def iterative_deepening_search(problem):
    for depth in xrange(sys.maxint):
        result = depth_limited_search(problem, depth)
        if result is not 'cutoff':
            return result


"""
--------------------------------------------------------------------------------------------------
PRIMER 1 : PROBLEM SO DVA SADA SO VODA
OPIS: 
Dadeni se dva sada J0 i J1 so kapaciteti C0 i C1. Na pocetok dvata sada se polni. Inicijalnata 
sostojba moze da se prosledi na pocetok. Problemot e kako da se stigne do sostojba vo koja J0 
ke ima G0 litri, a J1 ke ima G1 litri. 
AKCII:
1. Da se isprazni bilo koj od sadovite
2. Da se prefrli tecnosta od eden sad vo drug so toa sto ne moze da se nadmine kapacitetot na 
sadovite
Moze da ima i opcionalen tret vid na akcii 3. Napolni bilo koj od sadovite (studentite da ja 
implementiraat ovaa varijanta)
--------------------------------------------------------------------------------------------------
"""

class WJ(Problem):
    

    def __init__(self, capacities=(5, 2), initial=(5, 0), goal=(0, 1)):
        self.capacities = capacities
        self.initial = initial
        self.goal = goal

    def goal_test(self, state):
       
        g = self.goal
        return (state[0] == g[0] or g[0] == '*') and \
               (state[1] == g[1] or g[1] == '*')

    def successor(self, J):
       
        successors = dict()
        J0, J1 = J
        (C0, C1) = self.capacities
        if J0 > 0:
            Jnew = 0, J1
            successors['dump jug 0'] = Jnew
        if J1 > 0:
            Jnew = J0, 0
            successors['dump jug 1'] = Jnew
        if J1 < C1 and J0 > 0:
            delta = min(J0, C1 - J1)
            Jnew = J0 - delta, J1 + delta
            successors['pour jug 0 into jug 1'] = Jnew
        if J0 < C0 and J1 > 0:
            delta = min(J1, C0 - J0)
            Jnew = J0 + delta, J1 - delta
            successors['pour jug 1 into jug 0'] = Jnew
        return successors

    def actions(self, state):
        return self.successor(state).keys()

    def result(self, state, action):
        possible = self.successor(state)
        return possible[action]



#
#    WJInstance = WJ((5, 2), (5, 2), ('*', 1))
#    print WJInstance
#
#    answer1 = breadth_first_tree_search(WJInstance)
#    print answer1.solve()
#
#    answer2 = depth_first_tree_search(WJInstance) #vnimavajte na ovoj povik, moze da vleze vo beskonecna jamka
#    print answer2.solve()
#
#    answer3 = breadth_first_graph_search(WJInstance)
#    print answer3.solve()
#
#    answer4 = depth_first_graph_search(WJInstance)
#    print answer4.solve()
#
#    answer5 = depth_limited_search(WJInstance)
#    print answer5.solve()
#
#    answer6 = iterative_deepening_search(WJInstance)
#    print answer6.solve()




class CrnoBelo(Problem):
    def __init__(self, initial, goal):
        self.initial = str(initial)
        self.goal = str(goal)

    def goal_test(self, state):
        return state == self.goal

    def successor(self, state):
        successors = dict()
        dx = [-1, 0, 1, 0]
        dy = [0, 1, 0, -1]
        for x in range(0, N):
            for y in range(0, N):
                Matrix = eval(state)
                if Matrix[x][y] == 1:
                    Matrix[x][y] = 0
                    for k in range(4):
                        newX = x + dx[k]
                        newY = y + dy[k]
                        if newX >= 0 and newX < N and newY >= 0 and newY < N:
                            Matrix[newX][newY] = (Matrix[newX][newY] + 1) % 2
                    stateNew = Matrix
                    akcija = "X:" + str(x) + "Y:" + str(y)
                    successors[akcija] = str(stateNew)

        return successors

    def actions(self, state):
        return self.successor(state).keys()

    def result(self, state, action):
        possible = self.successor(state)
        return possible[action]


N = int(input())
polinja = map(int, input().split(','))
polinjaList = list(polinja)
InitialMatrix = [[0 for x in range(N)] for y in range(N)]
for i in range(0, N):
    for j in range(0, N):
        InitialMatrix[i][j] = polinjaList[i * N + j]
GoalMatrix = [[0 for x in range(N)] for y in range(N)]

crnoBeloinstance = CrnoBelo(InitialMatrix, GoalMatrix)
answer = breadth_first_graph_search(crnoBeloinstance).solution()
print(answer)
